Quero que você gere **todo o projeto GodoySys Gerenciamento** completo, criando pastas e arquivos diretamente, para que eu possa rodar o sistema no Netlify (frontend PWA) e conectar o banco de dados PostgreSQL no Neon (backend). Faça o seguinte:

1️⃣ Backend:
- Node.js + Express.js
- Prisma configurado para PostgreSQL (multi-tenant com companyId)
- Socket.io para pedidos e chat em tempo real
- Autenticação JWT (access + refresh), bcrypt para senhas
- PIN de admin para ações sensíveis
- Endpoints para: auth, users, companies, products, orders, chat, reports
- Endpoint especial POST /reports/download para gerar CSV de todos os relatórios e enviar por e-mail
- Seed inicial: 1 empresa demo, 1 admin demo, 1 atendente demo, produtos e pedidos de exemplo
- Todos os arquivos devem ter comentários detalhados em português explicando cada função, rota e módulo

2️⃣ Frontend:
- React + Vite + Tailwind CSS
- Estado global com Zustand
- Páginas: login, admin, pdv, pedidos, cozinha, chat, relatorios, config
- Componentes reutilizáveis para botões, tabelas, cards, inputs
- Integração com backend via fetch/axios
- Tela de admin com **botão de baixar relatórios** que chama o endpoint /reports/download
- PWA: manifest.json, service worker com cache básico e fila offline para pedidos
- Comentários em português explicando cada componente e como alterar ou adicionar funcionalidades

3️⃣ Estrutura de pastas:

/server
  /src
    /modules (auth, users, companies, products, orders, chat, reports)
    /middlewares
    /prisma (schema.prisma, migrations, seed.ts)
    app.ts
    server.ts
/web
  /src
    /components
    /pages (login.tsx, admin.tsx, pdv.tsx, pedidos.tsx, cozinha.tsx, chat.tsx, relatorios.tsx, config.tsx)
    /store
    /services (api.ts, sockets.ts)
    main.tsx
    App.tsx
  manifest.json
  service-worker.ts
.env.example
README.md

4️⃣ Variáveis de ambiente:

DATABASE_URL=URL do PostgreSQL no Neon  
JWT_SECRET=chave_super_secreta  
ADMIN_MASTER_PIN=1234  
EMAIL_SERVICE=smtp do seu e-mail  
EMAIL_USER=usuário do e-mail  
EMAIL_PASS=senha do e-mail  
PORT=4000

5️⃣ Funcionalidades principais:

- Cadastro multiempresa
- Produtos com atributos dinâmicos por categoria
- PDV rápido e intuitivo para atendentes
- Tela de pedidos com modo “cozinha” para restaurantes
- Chat interno com canais #suporte e #geral
- Relatórios básicos + botão para download e envio por e-mail
- Segurança avançada (JWT, PIN, audit logs)
- Multi-tenant: cada empresa só acessa seus próprios dados
- Atualizações em tempo real via Socket.io
- Importação de produtos via CSV
- Filtro de pedidos (abertos, pagos, não pagos, hoje, etc.)
- Dashboard admin: vendas do dia, ticket médio, estoque baixo, pedidos pendentes

6️⃣ Resultado esperado:

- Código completo, modular, limpo e totalmente comentado em português
- Sistema funcional para rodar no Netlify (frontend PWA) e backend com PostgreSQL Neon
- Botão no admin para baixar relatórios em CSV e enviar por e-mail
- Seed de exemplo para testar o sistema
- Estrutura pronta para evoluir e adicionar novos módulos
- Execução única com `npm run dev` (backend) e `npm run dev` (frontend)

⚡ Gere **todos os arquivos** com código inicial funcional, comentários detalhados em português, estrutura de pastas pronta, endpoints de API, frontend React com PWA, Socket.io, Prisma multi-tenant, seed de dados e botão de relatórios com download + envio de e-mail.
